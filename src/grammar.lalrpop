// Copyright 2018 The Rash Project Developers. See the AUTHORS
// file at the top of this distribution for a list of copyright
// holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0

use crate::ast::{Program, CompleteCommands, CompleteCommand, AndOr, AndOrOp, Pipeline, Command, SimpleCommand, Arg, TermOp};
use crate::lexer::*;

grammar<'input>(input: &'input str);

pub program: Program<'input> = {
    linebreak <complete_commands> linebreak => Program { commands: <> },
    linebreak => Program { commands: CompleteCommands { complete_commands: vec![] } },
}

complete_commands: CompleteCommands<'input> = {
    <rest:complete_commands> newline_list <c:complete_command> => rest.push(c),
                                          <c:complete_command> => CompleteCommands { complete_commands: vec![c] },
}

complete_command: CompleteCommand<'input> = {
    <l:list> <s:separator_op> => { let mut cc = l; cc.update_last(s); cc },
    list,
}

list: CompleteCommand<'input> = {
    <l:list> <s:separator_op> <a:and_or> => l.push(s, a),
                              <a:and_or> => CompleteCommand{ and_ors: vec![(TermOp::Semi, <>)] },
}

and_or: AndOr<'input> = {
    pipeline                                    => AndOr{ pipelines: vec![(AndOrOp::And, <>)] },
    <rest:and_or> AND_IF linebreak <p:pipeline> => rest.push(AndOrOp::And, p),
    <rest:and_or> OR_IF  linebreak <p:pipeline> => rest.push(AndOrOp::Or, p),
}

pipeline: Pipeline<'input> = {
    pipe_sequence,
    "!" <pipe_sequence> => <>.negate()
}

pipe_sequence: Pipeline<'input> = {
    command => Pipeline::new(<>),
    <p:pipe_sequence> "|" linebreak <c:command> => p.push(c)
}

// only implement simple_command for now
command: Command<'input> = {
    simple_command,
}

simple_command: Command<'input> = {
    <assign:cmd_prefix> <cmd:cmd_word> <args:cmd_suffix> => Command::Simple(SimpleCommand{ assign, cmd: Arg::Arg(cmd), args }),
    <assign:cmd_prefix> <cmd:cmd_word>                   => Command::Simple(SimpleCommand{ assign, cmd: Arg::Arg(cmd), args: vec![] }),
    <assign:cmd_prefix>                                  => Command::Simple(SimpleCommand{ assign, cmd: Arg::Arg(""), args: vec![] }),
    <cmd:cmd_name> <args:cmd_suffix>                     => Command::Simple(SimpleCommand{ assign: vec![], cmd: Arg::Arg(cmd), args }),
    cmd_name                                             => Command::Simple(SimpleCommand{ assign: vec![], cmd: Arg::Arg(<>), args: vec![] }),
};

cmd_name = { cmd_word }
cmd_word = {
    ARG_WORD,
}

cmd_prefix: Vec<&'input str> = {
    ASSIGNMENT_WORD+ => <>,
}

cmd_suffix: Vec<Arg<'input>> = {
    WORD+ => <>.into_iter().map(|w| { Arg::Arg(w) }).collect(),
}

WORD = {
    ARG_WORD,
    ASSIGNMENT_WORD,
}

// skipping down to the linebreak and separator section...

newline_list: () = {
    NEWLINE,
    newline_list NEWLINE,
}

linebreak = {
    newline_list?
}

separator_op: TermOp = {
    "&" => TermOp::Amp,
    ";" => TermOp::Semi,
}

separator: TermOp = {
    <separator_op> linebreak,
    newline_list => TermOp::Semi,
}

sequential_sep: () = {
    ";" linebreak,
    newline_list,
}

extern {
    type Location = usize;
    type Error =  LexError<'input>;

    enum Tok<'input> {
        "!" => Tok { tok_type: TokType::Word, input: "!"},
        "|" => Tok { tok_type: TokType::Operator, input: "|"},
        "&" => Tok { tok_type: TokType::Operator, input: "&"},
        ";" => Tok { tok_type: TokType::Operator, input: ";"},
        AND_IF => Tok { tok_type: TokType::Operator, input: "&&"},
        OR_IF => Tok { tok_type: TokType::Operator, input: "||"},
        DSEMI => Tok { tok_type: TokType::Operator, input: ";;"},
        ">" => Tok { tok_type: TokType::Operator, input: ">"},
        "<" => Tok { tok_type: TokType::Operator, input: "<"},
        DLESS => Tok { tok_type: TokType::Operator, input: "<<"},
        DGREAT => Tok { tok_type: TokType::Operator, input: ">>"},
        LESSAND => Tok { tok_type: TokType::Operator, input: "<&"},
        GREATAND => Tok { tok_type: TokType::Operator, input: ">&"},
        LESSGRAND => Tok { tok_type: TokType::Operator, input: "<>"},
        DLESSDASH => Tok { tok_type: TokType::Operator, input: "<<-"},
        CLOBBER => Tok { tok_type: TokType::Operator, input: ">|"},
        NEWLINE => Tok { tok_type: TokType::Word, input: "\n"},
        ASSIGNMENT_WORD => Tok { tok_type: TokType::AssignmentWord, input: <&'input str>},
        ARG_WORD => Tok { tok_type: TokType::Word, input: <&'input str>},
    }
}